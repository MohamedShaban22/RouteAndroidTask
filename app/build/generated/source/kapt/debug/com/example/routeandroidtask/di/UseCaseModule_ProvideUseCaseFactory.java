// Generated by Dagger (https://dagger.dev).
package com.example.routeandroidtask.di;

import com.example.domain.repo.ProductsRepo;
import com.example.domain.usecase.GetProducts;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class UseCaseModule_ProvideUseCaseFactory implements Factory<GetProducts> {
  private final Provider<ProductsRepo> productsRepoProvider;

  public UseCaseModule_ProvideUseCaseFactory(Provider<ProductsRepo> productsRepoProvider) {
    this.productsRepoProvider = productsRepoProvider;
  }

  @Override
  public GetProducts get() {
    return provideUseCase(productsRepoProvider.get());
  }

  public static UseCaseModule_ProvideUseCaseFactory create(
      Provider<ProductsRepo> productsRepoProvider) {
    return new UseCaseModule_ProvideUseCaseFactory(productsRepoProvider);
  }

  public static GetProducts provideUseCase(ProductsRepo productsRepo) {
    return Preconditions.checkNotNullFromProvides(UseCaseModule.INSTANCE.provideUseCase(productsRepo));
  }
}
